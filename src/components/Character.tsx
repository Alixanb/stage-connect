/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/character.glb -o src/components/Character.tsx -r public 
*/

import * as THREE from 'three'
import React from 'react'
import { useGraph, useFrame } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'Armature|mixamo.com|Layer0'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Cube002: THREE.SkinnedMesh
    Cube002_1: THREE.SkinnedMesh
    Cube002_2: THREE.SkinnedMesh
    Cube002_3: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
  }
  materials: {
    ['jeans.001']: THREE.MeshStandardMaterial
    ['tshirt.001']: THREE.MeshStandardMaterial
    ['shoes.001']: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Character(props: JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group>()
  const { scene, animations } = useGLTF('/models/character.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)

  // Joue la première animation automatiquement
  React.useEffect(() => {
    if (actions && Object.keys(actions).length > 0) {
      actions[Object.keys(actions)[0]]?.play()
    }
  }, [actions])

  // Garde le personnage au sol même pendant l'animation
  useFrame(() => {
    if (nodes.mixamorigHips) {
      nodes.mixamorigHips.position.y = 0
    }
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.004}>
          <primitive object={nodes.mixamorigHips} />
          <group name="character001">
            <skinnedMesh name="Cube002" geometry={nodes.Cube002.geometry} material={materials['jeans.001']} skeleton={nodes.Cube002.skeleton} />
            <skinnedMesh name="Cube002_1" geometry={nodes.Cube002_1.geometry} material={materials['tshirt.001']} skeleton={nodes.Cube002_1.skeleton} />
            <skinnedMesh name="Cube002_2" geometry={nodes.Cube002_2.geometry} material={materials['shoes.001']} skeleton={nodes.Cube002_2.skeleton} />
            <skinnedMesh name="Cube002_3" geometry={nodes.Cube002_3.geometry} material={materials['Material.001']} skeleton={nodes.Cube002_3.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/character.glb')
